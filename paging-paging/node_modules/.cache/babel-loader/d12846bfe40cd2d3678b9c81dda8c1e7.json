{"ast":null,"code":"import _classCallCheck from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/umas/my-app/src/CardApp.jsx\";\nimport React, { Component } from 'react';\nimport CardContainer from './CardContainer';\nimport './CardApp.css';\nimport CreateRawCardList from './CreateRawCardList';\nvar appWidth;\n\nvar CardApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardApp, _Component);\n\n  function CardApp(props) {\n    var _this;\n\n    _classCallCheck(this, CardApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CardApp).call(this, props));\n\n    _this.componentWillMount = function () {\n      window.addEventListener(\"resize\", _this.updateWidth);\n    };\n\n    _this.componentDidMount = function () {\n      _this.updateWidth();\n    };\n\n    _this.updateWidth = function () {\n      appWidth = document.getElementById('card-app').clientWidth;\n\n      _this.setState({\n        containerWidth: appWidth,\n        screenType: _this.getScreenType()\n      }, function () {\n        _this.createRawCardList();\n      });\n\n      console.log(_this.state);\n    };\n\n    _this.createRawCardList = function () {\n      console.log(_this.state.screenType);\n\n      if (_this.state.screenType !== 'mobile phone') {\n        _this.setState({\n          rawCradList: CreateRawCardList()\n        });\n      }\n\n      switch (_this.state.screenType) {\n        case 'mobile phone':\n          _this.adaptMobileScreen();\n\n          break;\n\n        case 'tablet':\n          _this.adaptLaptopScreen();\n\n          break;\n\n        case 'laptop':\n        case 'PC screens and bigger':\n          _this.adaptLaptopScreen();\n\n          break;\n\n        default:\n          throw new Error('Scree Type Error');\n      }\n    };\n\n    _this.getScreenType = function () {\n      var width = _this.state.containerWidth;\n\n      if (width <= 480) {\n        console.log('mobile phone');\n        return 'mobile phone';\n      } else if (width <= 1024) {\n        console.log('tablet');\n        return 'tablet';\n      } else if (width <= 1600) {\n        console.log('laptop');\n        return 'laptop';\n      } else {\n        console.log('PC screens and bigger');\n        return 'PC screens and bigger';\n      }\n    };\n\n    _this.setContainerRef = function (element) {\n      _this.containerElement = element;\n    };\n\n    _this.state = {\n      containerWidth: document.getElementById('card-app').clientWidth,\n      screenType: '',\n      rawCradList: []\n    };\n    return _this;\n  }\n\n  _createClass(CardApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CardContainer, {\n        cardListData: this.state.rawCradList,\n        refHandler: this.setContainerRef,\n        screenType: this.state.screenType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CardApp;\n}(Component);\n\nexport default CardApp;","map":{"version":3,"sources":["/Users/umas/my-app/src/CardApp.jsx"],"names":["React","Component","CardContainer","CreateRawCardList","appWidth","CardApp","props","componentWillMount","window","addEventListener","updateWidth","componentDidMount","document","getElementById","clientWidth","setState","containerWidth","screenType","getScreenType","createRawCardList","console","log","state","rawCradList","adaptMobileScreen","adaptLaptopScreen","Error","width","setContainerRef","element","containerElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CardContainer from './CardContainer';\nimport './CardApp.css'\nimport CreateRawCardList from './CreateRawCardList';\n\nlet appWidth\n\nclass CardApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      containerWidth:document.getElementById('card-app').clientWidth,\n      screenType:'',\n      rawCradList:[]\n    }    \n  }\n\n  componentWillMount = () => {\n    window.addEventListener(\"resize\", this.updateWidth)\n  }  \n\n  componentDidMount = () => {\n    this.updateWidth()\n  }\n\n  updateWidth = () => {\n    appWidth = document.getElementById('card-app').clientWidth\n    this.setState({containerWidth:appWidth,screenType:this.getScreenType()},()=>{this.createRawCardList()})\n    console.log(this.state)\n  }\n\n  createRawCardList = () => {\n    console.log(this.state.screenType)\n    if (this.state.screenType !== 'mobile phone') {\n      this.setState({rawCradList:CreateRawCardList()})\n    } \n    switch (this.state.screenType) {\n      case 'mobile phone':\n        this.adaptMobileScreen()\n        break;\n      case 'tablet':\n        this.adaptLaptopScreen()\n        break;\n      case 'laptop':\n      case 'PC screens and bigger':\n        this.adaptLaptopScreen()\n        break;\n      default:\n        throw new Error('Scree Type Error')\n    }\n  }\n\n  getScreenType = () => {\n    let width = this.state.containerWidth\n    if (width <= 480) {\n      console.log('mobile phone')\n      return 'mobile phone'\n    } else if (width <= 1024) {\n      console.log('tablet')\n      return 'tablet'\n    } else if (width <=1600) {\n      console.log('laptop')\n      return 'laptop'\n    } else {\n      console.log('PC screens and bigger')\n      return 'PC screens and bigger'\n    }\n  }\n\n  setContainerRef = (element) => {\n    this.containerElement = element\n  }\n  \n\n  render() {\n    return <CardContainer cardListData={this.state.rawCradList} refHandler={this.setContainerRef} screenType={this.state.screenType}></CardContainer>\n  }\n\n}\n\nexport default CardApp;"]},"metadata":{},"sourceType":"module"}