{"ast":null,"code":"import _classCallCheck from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/umas/my-app/src/TextInput.jsx\";\nimport React, { Component } from 'react';\nimport { reject } from 'q'; // function initPromise(text) {\n//   return new Promise(function (resolve,reject) {\n//     this.setState({typedText: text})\n//     if (this.state.typedText === text) {\n//       resolve(this.state.typedText)\n//     } else {\n//       reject(this.state.typedText)\n//     }\n//   })\n// }\n// checkOrder.then()\n\nvar TextInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TextInput, _Component);\n\n  function TextInput(props) {\n    var _this;\n\n    _classCallCheck(this, TextInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextInput).call(this, props));\n\n    _this.onClickHandler = function () {\n      return _this.props.onClickHandler;\n    };\n\n    _this.styleHandler = function () {\n      return _this.props.styleHandler;\n    };\n\n    _this.state = {\n      state: 'A',\n      typedText: ''\n    };\n    return _this;\n  }\n\n  _createClass(TextInput, [{\n    key: \"render\",\n    // onChangeHandler = (event) => {\n    //   this.setState({typedText: event.target.value})\n    //   console.log('typedText: ' + this.state.typedText);\n    //   this.props.onChange(event.target.value)\n    // }\n    // initPromise = (text) => {\n    //   return new Promise((resolve,reject)=>{\n    //     this.setState({typedText: text})\n    //       if (this.state.typedText === text) {\n    //         resolve(this.state.typedText)\n    //       } else {\n    //         reject(this.state.typedText)\n    //       }\n    //   })\n    // }\n    // onChangeHandler = (event) => {\n    //   console.log('typedText: ' + this.state.typedText);\n    //   console.log('event.target.value: ' + event.target.value);\n    //   this.initPromise(event.target.value)\n    //   .then((value)=>{this.props.onChange(value)},(value)=>{console.log(\"Error: \" + value);\n    //   })\n    // }\n    value: function render() {\n      return React.createElement(\"input\", {\n        onClick: this.onClickHandler(),\n        style: this.styleHandler(),\n        placeholder: this.props.placeholderHandler,\n        value: this.state.typedText,\n        onChange: this.onChangeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TextInput;\n}(Component);\n\nexport default TextInput; // {/* <input onClick={this.props.onClickHandlRef} style={this.props.handleStyle} placeholder={this.props.placeHolderRef}></input> */},\n// 在子元件要呼叫父元件的props時，需要加括號，應該是因為子元件的props裡面包含有父元件建立的一些函式，是呼叫props用的函式\n// 子元件屬性中只能呼叫1.props裡面的父元件函式2.自己的函式","map":{"version":3,"sources":["/Users/umas/my-app/src/TextInput.jsx"],"names":["React","Component","reject","TextInput","props","onClickHandler","styleHandler","state","typedText","placeholderHandler","onChangeHandler"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,GAAvB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAGMC,S;;;;;AAEJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;;AADiB,UAQnBC,cARmB,GAQF;AAAA,aAAM,MAAKD,KAAL,CAAWC,cAAjB;AAAA,KARE;;AAAA,UASnBC,YATmB,GASJ;AAAA,aAAM,MAAKF,KAAL,CAAWE,YAAjB;AAAA,KATI;;AAEjB,UAAKC,KAAL,GAAa;AACXA,MAAAA,KAAK,EAAE,GADI;AAEXC,MAAAA,SAAS,EAAE;AAFA,KAAb;AAFiB;AAMlB;;;;AAKD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;6BAOS;AACP,aACE;AAAO,QAAA,OAAO,EAAE,KAAKH,cAAL,EAAhB;AAAuC,QAAA,KAAK,EAAE,KAAKC,YAAL,EAA9C;AAAmE,QAAA,WAAW,EAAE,KAAKF,KAAL,CAAWK,kBAA3F;AAA+G,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,SAAjI;AAA4I,QAAA,QAAQ,EAAE,KAAKE,eAA3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;;EAhDqBT,S;;AAmDxB,eAAeE,SAAf,C,CAEM;AAGN;AACA","sourcesContent":["import React, { Component } from 'react';\nimport { reject } from 'q';\n\n\n\n\n// function initPromise(text) {\n//   return new Promise(function (resolve,reject) {\n//     this.setState({typedText: text})\n//     if (this.state.typedText === text) {\n//       resolve(this.state.typedText)\n//     } else {\n//       reject(this.state.typedText)\n//     }\n//   })\n// }\n// checkOrder.then()\n\n\nclass TextInput extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      state: 'A',\n      typedText: ''\n    }\n  }\n\n  onClickHandler = () => this.props.onClickHandler\n  styleHandler = () => this.props.styleHandler\n  \n  // onChangeHandler = (event) => {\n  //   this.setState({typedText: event.target.value})\n  //   console.log('typedText: ' + this.state.typedText);\n  //   this.props.onChange(event.target.value)\n  // }\n  \n  // initPromise = (text) => {\n  //   return new Promise((resolve,reject)=>{\n  //     this.setState({typedText: text})\n  //       if (this.state.typedText === text) {\n  //         resolve(this.state.typedText)\n  //       } else {\n  //         reject(this.state.typedText)\n  //       }\n  //   })\n  // }\n  \n  \n  // onChangeHandler = (event) => {\n  //   console.log('typedText: ' + this.state.typedText);\n  //   console.log('event.target.value: ' + event.target.value);\n  //   this.initPromise(event.target.value)\n  //   .then((value)=>{this.props.onChange(value)},(value)=>{console.log(\"Error: \" + value);\n  //   })\n  // }\n\n  \n\n  \n  \n\n  render() {\n    return (\n      <input onClick={this.onClickHandler()} style={this.styleHandler()} placeholder={this.props.placeholderHandler} value={this.state.typedText} onChange={this.onChangeHandler}></input>\n    )\n  }\n}\n\nexport default TextInput;\n\n      // {/* <input onClick={this.props.onClickHandlRef} style={this.props.handleStyle} placeholder={this.props.placeHolderRef}></input> */},\n\n\n// 在子元件要呼叫父元件的props時，需要加括號，應該是因為子元件的props裡面包含有父元件建立的一些函式，是呼叫props用的函式\n// 子元件屬性中只能呼叫1.props裡面的父元件函式2.自己的函式"]},"metadata":{},"sourceType":"module"}