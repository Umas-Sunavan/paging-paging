{"ast":null,"code":"import _classCallCheck from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/umas/my-app/src/CardApp.jsx\";\nimport React, { Component } from 'react';\nimport CardContainer from './CardContainer';\nimport createRawCardDataList from './CreateRawCardDataList';\nimport convertToMobileCardDataList from './ConvertToMobileCardDataList';\nimport createCardLocationList from './CreateCardLocationList';\nvar appWidth;\n\nvar CardApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardApp, _Component);\n\n  function CardApp(props) {\n    var _this;\n\n    _classCallCheck(this, CardApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CardApp).call(this, props));\n\n    _this.componentWillMount = function () {\n      window.addEventListener(\"resize\", _this.updateWidth);\n    };\n\n    _this.componentDidMount = function () {\n      _this.updateWidth();\n    };\n\n    _this.updateWidth = function () {\n      appWidth = document.getElementById('card-app').clientWidth;\n\n      _this.setState({\n        containerWidth: appWidth,\n        screenType: _this.getScreenType()\n      }, function () {\n        _this.createCardList();\n      });\n\n      console.log(_this.state);\n    };\n\n    _this.createCardList = function () {\n      console.log(_this.state.screenType);\n\n      switch (_this.state.screenType) {\n        case 'mobile phone':\n          _this.adaptMobileScreen();\n\n          break;\n\n        case 'tablet':\n        case 'laptop':\n        case 'PC screens and bigger':\n          _this.adaptLaptopScreen();\n\n          break;\n\n        default:\n          throw new Error('Scree Type Error');\n      }\n    };\n\n    _this.adaptMobileScreen = function () {\n      _this.setState({\n        cardDataList: convertToMobileCardDataList(createRawCardDataList(_this.state.bCardOuterHeight))\n      }, _this.setCardLocationList);\n    };\n\n    _this.adaptLaptopScreen = function () {\n      _this.setState({\n        cardDataList: createRawCardDataList(_this.state.bCardOuterHeight)\n      }, _this.setCardLocationList);\n    };\n\n    _this.setCardLocationList = function () {\n      _this.setState({\n        cardLocationList: createCardLocationList(_this.state.cardDataList)\n      }, function () {\n        console.log(_this.state.cardLocationList);\n      });\n    };\n\n    _this.getScreenType = function () {\n      var width = _this.state.containerWidth;\n\n      if (width <= 480) {\n        console.log('mobile phone');\n        return 'mobile phone';\n      } else if (width <= 1024) {\n        console.log('tablet');\n        return 'tablet';\n      } else if (width <= 1600) {\n        console.log('laptop');\n        return 'laptop';\n      } else {\n        console.log('PC screens and bigger');\n        return 'PC screens and bigger';\n      }\n    };\n\n    _this.setContainerRef = function (element) {\n      _this.containerElement = element;\n    };\n\n    _this.rawMoveBCard = function (ACardIndex, distance) {\n      var origionalCardDataList = _this.state.cardDataList;\n\n      var origionalTransformY = _this.getOrigionalTransformY(ACardIndex);\n\n      console.log(\"origional: \" + +origionalTransformY + ', distance: ' + distance + ' = ' + (+origionalTransformY + _this.state.bCardOuterHeight * distance));\n      origionalCardDataList[ACardIndex].ACardAttr = {\n        style: {\n          transform: 'translate3d(0px,' + origionalTransformY + _this.state.bCardOuterHeight * distance + 'vh,0px)'\n        } // origionalCardDataList[ACardIndex].ACardAttr.style.backgroundColor = \"#dd9999\"\n\n      };\n\n      _this.setState({\n        cardDataList: origionalCardDataList\n      }); // this.setState({})\n\n    };\n\n    _this.getOrigionalTransformY = function (ACardIndex) {\n      var origionaltransform;\n      _this.state.cardDataList[ACardIndex].ACardAttr.style === undefined ? origionaltransform = 'translate3d(0px,0vh,0px)' : origionaltransform = _this.state.cardDataList[ACardIndex].ACardAttr.style.transform;\n      var yNumberEnd = origionaltransform.toString().lastIndexOf(',');\n      origionaltransform = origionaltransform.slice(0, yNumberEnd - 2);\n      console.log(origionaltransform + yNumberEnd);\n      var yNumberStart = origionaltransform.lastIndexOf(',');\n      console.log(origionaltransform + yNumberStart);\n      var stringOrigionalTransformY = origionaltransform.slice(yNumberStart + 1);\n      return +stringOrigionalTransformY;\n    };\n\n    _this.state = {\n      containerWidth: document.getElementById('card-app').clientWidth,\n      screenType: '',\n      cardDataList: [],\n      cardLocationList: [],\n      bCardOuterHeight: 100\n    };\n    return _this;\n  }\n\n  _createClass(CardApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CardContainer, {\n        getCardLocationList: this.state.cardLocationList,\n        getBCardOuterHeight: this.state.bCardOuterHeight,\n        cardListData: this.state.cardDataList,\n        rawMoveBCard: this.rawMoveBCard,\n        refHandler: this.setContainerRef,\n        screenType: this.state.screenType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CardApp;\n}(Component);\n\nexport default CardApp;","map":{"version":3,"sources":["/Users/umas/my-app/src/CardApp.jsx"],"names":["React","Component","CardContainer","createRawCardDataList","convertToMobileCardDataList","createCardLocationList","appWidth","CardApp","props","componentWillMount","window","addEventListener","updateWidth","componentDidMount","document","getElementById","clientWidth","setState","containerWidth","screenType","getScreenType","createCardList","console","log","state","adaptMobileScreen","adaptLaptopScreen","Error","cardDataList","bCardOuterHeight","setCardLocationList","cardLocationList","width","setContainerRef","element","containerElement","rawMoveBCard","ACardIndex","distance","origionalCardDataList","origionalTransformY","getOrigionalTransformY","ACardAttr","style","transform","origionaltransform","undefined","yNumberEnd","toString","lastIndexOf","slice","yNumberStart","stringOrigionalTransformY"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CardContainer from './CardContainer';\nimport createRawCardDataList from './CreateRawCardDataList';\nimport convertToMobileCardDataList from './ConvertToMobileCardDataList'\nimport createCardLocationList from './CreateCardLocationList'\n\nlet appWidth\n\nclass CardApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      containerWidth:document.getElementById('card-app').clientWidth,\n      screenType:'',\n      cardDataList:[],\n      cardLocationList:[],\n      bCardOuterHeight:100\n    }    \n  }\n\n  componentWillMount = () => {\n    window.addEventListener(\"resize\", this.updateWidth)\n  }  \n\n  componentDidMount = () => {\n    this.updateWidth()\n  }\n\n  updateWidth = () => {\n    appWidth = document.getElementById('card-app').clientWidth\n    this.setState({containerWidth:appWidth,screenType:this.getScreenType()},()=>{this.createCardList()})\n    console.log(this.state)\n  }\n\n  createCardList = () => {\n    console.log(this.state.screenType)\n    switch (this.state.screenType) {\n      case 'mobile phone':\n        this.adaptMobileScreen()\n        break;\n      case 'tablet':\n      case 'laptop':\n      case 'PC screens and bigger':\n        this.adaptLaptopScreen()\n        break;\n      default:\n        throw new Error('Scree Type Error')\n    }   \n  }\n\n  adaptMobileScreen = () => {\n    this.setState({cardDataList:convertToMobileCardDataList(createRawCardDataList(this.state.bCardOuterHeight))},this.setCardLocationList)    \n  }\n  \n\n  adaptLaptopScreen = () => {\n    this.setState({cardDataList:createRawCardDataList(this.state.bCardOuterHeight)},this.setCardLocationList)\n  }\n\n  setCardLocationList = () => {\n    this.setState({cardLocationList:createCardLocationList(this.state.cardDataList)},()=>{console.log(this.state.cardLocationList)})\n  }\n\n  getScreenType = () => {\n    let width = this.state.containerWidth\n    if (width <= 480) {\n      console.log('mobile phone')\n      return 'mobile phone'\n    } else if (width <= 1024) {\n      console.log('tablet')\n      return 'tablet'\n    } else if (width <=1600) {\n      console.log('laptop')\n      return 'laptop'\n    } else {\n      console.log('PC screens and bigger')\n      return 'PC screens and bigger'\n    }\n  }\n\n  setContainerRef = (element) => {\n    this.containerElement = element\n  }\n\n  rawMoveBCard = (ACardIndex,distance) => {\n    let origionalCardDataList = this.state.cardDataList\n    let origionalTransformY = this.getOrigionalTransformY(ACardIndex)\n    console.log(\"origional: \" + (+origionalTransformY) + ', distance: ' + distance + ' = ' + ((+origionalTransformY) + (this.state.bCardOuterHeight * distance)));\n\n    origionalCardDataList[ACardIndex].ACardAttr = {style:{transform:'translate3d(0px,' + origionalTransformY + (this.state.bCardOuterHeight * distance) +'vh,0px)'}}\n    \n    // origionalCardDataList[ACardIndex].ACardAttr.style.backgroundColor = \"#dd9999\"\n    this.setState({cardDataList:origionalCardDataList})\n    \n    // this.setState({})\n  }\n\n  getOrigionalTransformY = (ACardIndex) => {\n    let origionaltransform \n    (this.state.cardDataList[ACardIndex].ACardAttr.style === undefined)? origionaltransform = 'translate3d(0px,0vh,0px)' : origionaltransform = this.state.cardDataList[ACardIndex].ACardAttr.style.transform\n    let yNumberEnd = origionaltransform.toString().lastIndexOf(',')\n    origionaltransform = origionaltransform.slice(0,yNumberEnd-2)\n    console.log(origionaltransform + yNumberEnd);\n    let yNumberStart = origionaltransform.lastIndexOf(',')\n    console.log(origionaltransform + yNumberStart);\n    let stringOrigionalTransformY = origionaltransform.slice(yNumberStart +1)\n    return (+stringOrigionalTransformY)\n  }\n\n  render() {\n    return (<CardContainer \n    getCardLocationList={this.state.cardLocationList} \n    getBCardOuterHeight={this.state.bCardOuterHeight} \n    cardListData={this.state.cardDataList} \n    rawMoveBCard={this.rawMoveBCard} \n    refHandler={this.setContainerRef} \n    screenType={this.state.screenType}></CardContainer>)\n  }\n\n}\n\nexport default CardApp;"]},"metadata":{},"sourceType":"module"}