{"ast":null,"code":"import _classCallCheck from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/umas/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/umas/my-app/src/CardApp.jsx\";\nimport React, { Component } from 'react';\nimport CardContainer from './CardContainer';\nimport './CardApp.css';\nimport CreateRawCardDataList from './CreateRawCardDataList';\nimport ConvertToMobileCardDataList from './ConvertToMobileCardDataList';\nvar appWidth;\n\nvar CardApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardApp, _Component);\n\n  function CardApp(props) {\n    var _this;\n\n    _classCallCheck(this, CardApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CardApp).call(this, props));\n\n    _this.componentWillMount = function () {\n      window.addEventListener(\"resize\", _this.updateWidth);\n    };\n\n    _this.componentDidMount = function () {\n      _this.updateWidth();\n    };\n\n    _this.updateWidth = function () {\n      appWidth = document.getElementById('card-app').clientWidth;\n\n      _this.setState({\n        containerWidth: appWidth,\n        screenType: _this.getScreenType()\n      }, function () {\n        _this.createCardList();\n      });\n\n      console.log(_this.state);\n    };\n\n    _this.createCardList = function () {\n      console.log(_this.state.screenType);\n\n      switch (_this.state.screenType) {\n        case 'mobile phone':\n          _this.adaptMobileScreen();\n\n          break;\n\n        case 'tablet':\n        case 'laptop':\n        case 'PC screens and bigger':\n          _this.adaptLaptopScreen();\n\n          break;\n\n        default:\n          throw new Error('Scree Type Error');\n      }\n    };\n\n    _this.adaptMobileScreen = function () {\n      _this.setState({\n        cardDataList: ConvertToMobileCardDataList(CreateRawCardDataList())\n      }, _this.setCardLocationList);\n    };\n\n    _this.adaptLaptopScreen = function () {\n      _this.setState({\n        cardDataList: CreateRawCardDataList()\n      });\n    };\n\n    _this.setCardLocationList = function () {\n      console.log(_this.state.cardDataList);\n      createCardLocationList();\n    };\n\n    _this.getScreenType = function () {\n      var width = _this.state.containerWidth;\n\n      if (width <= 480) {\n        console.log('mobile phone');\n        return 'mobile phone';\n      } else if (width <= 1024) {\n        console.log('tablet');\n        return 'tablet';\n      } else if (width <= 1600) {\n        console.log('laptop');\n        return 'laptop';\n      } else {\n        console.log('PC screens and bigger');\n        return 'PC screens and bigger';\n      }\n    };\n\n    _this.setContainerRef = function (element) {\n      _this.containerElement = element;\n    };\n\n    _this.state = {\n      containerWidth: document.getElementById('card-app').clientWidth,\n      screenType: '',\n      cardDataList: [],\n      cardLocationList: []\n    };\n    return _this;\n  }\n\n  _createClass(CardApp, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(CardContainer, {\n        cardListData: this.state.cardDataList,\n        refHandler: this.setContainerRef,\n        screenType: this.state.screenType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return CardApp;\n}(Component);\n\nexport default CardApp;","map":{"version":3,"sources":["/Users/umas/my-app/src/CardApp.jsx"],"names":["React","Component","CardContainer","CreateRawCardDataList","ConvertToMobileCardDataList","appWidth","CardApp","props","componentWillMount","window","addEventListener","updateWidth","componentDidMount","document","getElementById","clientWidth","setState","containerWidth","screenType","getScreenType","createCardList","console","log","state","adaptMobileScreen","adaptLaptopScreen","Error","cardDataList","setCardLocationList","createCardLocationList","width","setContainerRef","element","containerElement","cardLocationList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CardContainer from './CardContainer';\nimport './CardApp.css'\nimport CreateRawCardDataList from './CreateRawCardDataList';\nimport ConvertToMobileCardDataList from './ConvertToMobileCardDataList'\n\nlet appWidth\n\nclass CardApp extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      containerWidth:document.getElementById('card-app').clientWidth,\n      screenType:'',\n      cardDataList:[],\n      cardLocationList:[]\n    }    \n  }\n\n  componentWillMount = () => {\n    window.addEventListener(\"resize\", this.updateWidth)\n  }  \n\n  componentDidMount = () => {\n    this.updateWidth()\n  }\n\n  updateWidth = () => {\n    appWidth = document.getElementById('card-app').clientWidth\n    this.setState({containerWidth:appWidth,screenType:this.getScreenType()},()=>{this.createCardList()})\n    console.log(this.state)\n  }\n\n  createCardList = () => {\n    console.log(this.state.screenType)\n    switch (this.state.screenType) {\n      case 'mobile phone':\n        this.adaptMobileScreen()\n        break;\n      case 'tablet':\n      case 'laptop':\n      case 'PC screens and bigger':\n        this.adaptLaptopScreen()\n        break;\n      default:\n        throw new Error('Scree Type Error')\n    }   \n  }\n\n  adaptMobileScreen = () => {\n    this.setState({cardDataList:ConvertToMobileCardDataList(CreateRawCardDataList())},this.setCardLocationList)    \n  }\n  \n\n  adaptLaptopScreen = () => {\n    this.setState({cardDataList:CreateRawCardDataList()})\n  }\n\n  setCardLocationList = () => {\n    console.log(this.state.cardDataList)\n    createCardLocationList()\n  }\n\n  getScreenType = () => {\n    let width = this.state.containerWidth\n    if (width <= 480) {\n      console.log('mobile phone')\n      return 'mobile phone'\n    } else if (width <= 1024) {\n      console.log('tablet')\n      return 'tablet'\n    } else if (width <=1600) {\n      console.log('laptop')\n      return 'laptop'\n    } else {\n      console.log('PC screens and bigger')\n      return 'PC screens and bigger'\n    }\n  }\n\n  setContainerRef = (element) => {\n    this.containerElement = element\n  }\n  \n\n  render() {\n    return <CardContainer cardListData={this.state.cardDataList} refHandler={this.setContainerRef} screenType={this.state.screenType}></CardContainer>\n  }\n\n}\n\nexport default CardApp;"]},"metadata":{},"sourceType":"module"}